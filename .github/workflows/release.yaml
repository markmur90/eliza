name: Release

on:
  release:
    types: [created]
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main # Assumes releases are created from main
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: '23'

      - uses: oven-sh/setup-bun@v2

      - name: 'Setup npm for npmjs'
        run: |
          npm config set registry https://registry.npmjs.org/
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc

      - name: Install Protobuf Compiler
        run: sudo apt-get install -y protobuf-compiler

      - name: Install dependencies
        run: bun install

      - name: Check format
        run: bun run format:check

      - name: Run lint
        run: bun run lint

      - name: Build packages
        run: bun run build && bun run build:docs

      - name: Publish Packages
        id: publish
        run: |
          # Get version from the release tag that triggered the workflow
          LATEST_TAG=${{ github.ref_name }}
          VERSION=${LATEST_TAG#v}
          echo "VERSION=$VERSION" >> $GITHUB_ENV

          echo "Publishing version: $VERSION"
          # Lerna will update versions in package.json files but not commit or tag
          npx lerna publish $VERSION --exact --yes --dist-tag latest --no-private --force-publish --no-git-tag-version --no-push
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Commit and Push Version Bump
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add **/package.json
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No version changes to commit."
          else
            git commit -m "chore(release): bump versions to v${{ env.VERSION }}"
            git push origin main
          fi

      - name: Create Pull Request to develop
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr create \
            --base "develop" \
            --head "main" \
            --title "Release: Sync main to develop for v${{ env.VERSION }}" \
            --body "Syncs version bump from main to develop." \
            --label "1.x"
